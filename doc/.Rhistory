X.chickwts<-soybean$weight
Y.chickwts<-casein$weight
Y.tilde.chickwts<-Y.chickwts+mean(X.chickwts)-mean(Y.chickwts)
set.seed(123)
B<-10000
z.score<-vector()
for(i in 1:B){
X.sample<-sample(X.chickwts,length(X.chickwts),replace=TRUE)
Y.sample<-sample(Y.tilde.chickwts,length(Y.tilde.chickwts),replace=TRUE)
z.score[i]<-abs(mean(X.sample)-mean(Y.sample))/sqrt(var(X.sample)+var(Y.sample))
}
z.obs<-abs(mean(X.chickwts)-mean(Y.chickwts))/sqrt(var(X.chickwts)+var(Y.chickwts))
p.boot<-sum(z.score>=z.obs)/B
X.chickwts<-soybean$weight
Y.chickwts<-casein$weight
Y.tilde.chickwts<-Y.chickwts+mean(X.chickwts)-mean(Y.chickwts)
set.seed(123)
B<-10000
z.score<-vector()
for(i in 1:B){
X.sample<-sample(X.chickwts,length(X.chickwts),replace=TRUE)
Y.sample<-sample(Y.tilde.chickwts,length(Y.tilde.chickwts),replace=TRUE)
z.score[i]<-abs(mean(X.sample)-mean(Y.sample))/sqrt(var(X.sample)+var(Y.sample))
}
z.obs<-abs(mean(X.chickwts)-mean(Y.chickwts))/sqrt(var(X.chickwts)+var(Y.chickwts))
p.boot<-sum(z.score>=z.obs)/B
print(p.boot)
X.chickwts<-soybean$weight
Y.chickwts<-casein$weight
Y.tilde.chickwts<-Y.chickwts+mean(X.chickwts)-mean(Y.chickwts)
set.seed(123)
B<-10000
z.score<-vector()
for(i in 1:B){
X.sample<-sample(X.chickwts,length(X.chickwts),replace=TRUE)
Y.sample<-sample(Y.tilde.chickwts,length(Y.tilde.chickwts),replace=TRUE)
z.score[i]<-abs(mean(X.sample)-mean(Y.sample))/sqrt(var(X.sample)+var(Y.sample))
}
z.obs<-abs(mean(X.chickwts)-mean(Y.chickwts))/sqrt(var(X.chickwts)+var(Y.chickwts))
p.boot<-sum(z.score>=z.obs)/B
print(paste0("The p-value is ",p.boot))
wilcox.test(soybean$weight,casein$weight)
setwd("G:/Columbia/STAT GR5291")
data("chickwts")
chickwts<-chickwts
soybean<-chickwts[chickwts$feed=="soybean",]
casein<-chickwts[chickwts$feed=="casein",]
shapiro.test(soybean$weight)
shapiro.test(casein$weight)
var.test(soybean$weight,casein$weight)
t.test(soybean$weight,casein$weight,var.equal=TRUE)
wilcox.test(soybean$weight,casein$weight)
X.chickwts<-soybean$weight
Y.chickwts<-casein$weight
Y.tilde.chickwts<-Y.chickwts+mean(X.chickwts)-mean(Y.chickwts)
set.seed(123)
B<-10000
z.score<-vector()
for(i in 1:B){
X.sample<-sample(X.chickwts,length(X.chickwts),replace=TRUE)
Y.sample<-sample(Y.tilde.chickwts,length(Y.tilde.chickwts),replace=TRUE)
z.score[i]<-abs(mean(X.sample)-mean(Y.sample))/sqrt(var(X.sample)+var(Y.sample))
}
z.obs<-abs(mean(X.chickwts)-mean(Y.chickwts))/sqrt(var(X.chickwts)+var(Y.chickwts))
p.boot<-sum(z.score>=z.obs)/B
print(paste0("The p-value is ",p.boot))
setwd("G:/Columbia/STAT GR5291")
data("chickwts")
chickwts<-chickwts
soybean<-chickwts[chickwts$feed=="soybean",]
casein<-chickwts[chickwts$feed=="casein",]
# Shapiro-Wilk test
shapiro.test(soybean$weight)
shapiro.test(casein$weight)
# F test
var.test(soybean$weight,casein$weight)
# two sample t test
t.test(soybean$weight,casein$weight,var.equal=TRUE)
# Wilcoxon Rank-Sum test
wilcox.test(soybean$weight,casein$weight)
# bootstrap
X.chickwts<-soybean$weight
Y.chickwts<-casein$weight
Y.tilde.chickwts<-Y.chickwts+mean(X.chickwts)-mean(Y.chickwts)
set.seed(123)
B<-10000
z.score<-vector()
for(i in 1:B){
X.sample<-sample(X.chickwts,length(X.chickwts),replace=TRUE)
Y.sample<-sample(Y.tilde.chickwts,length(Y.tilde.chickwts),replace=TRUE)
z.score[i]<-abs(mean(X.sample)-mean(Y.sample))/sqrt(var(X.sample)+var(Y.sample))
}
z.obs<-abs(mean(X.chickwts)-mean(Y.chickwts))/sqrt(var(X.chickwts)+var(Y.chickwts))
p.boot<-sum(z.score>=z.obs)/B
print(paste0("The p-value is ",p.boot))
wilcox.test(soybean$weight,casein$weight)
t<-c(4,4,10,11,12,14,14,16,19,20,24,26,31,67,84,100,115)
ks.test(t,"pexp",14/571)
ks.test(t,"pexp",1)
ks.test(t,"pexp",17/571)
ks.test(t,"pexp",14/571)
cr<-c(0.174,0.179,0.176,0.181,0.176,0.189,0.169,0.175,0.178,0.174,0.246,0.260)
w<-NULL
for(i in 1:12){
for(j in i:12){
w<-c(w,(cr[i]+cr[j])/2)
}
}
w<-sort(w)
theta<-median(w)
theta
k<-qsignrank(0.032,12)
ci<-c(w[k+1],w[12*(12+1)/2-k])
ci
w
k
wilcox.test(cr-0.18)
shinyApp(ui=ui,server=server)
library(shiny)
#用户界面
ui<-fluidPage(
#创建标题
headerPanel("Iris k-means clustering"),
#创建边上可活动指示牌
sidebarPanel(
#输入项 用于server函数的input
#选择输入
#第一个变量为输入中的选择
selectInput('xcol','X Variable',names(iris)),
selectInput('ycol','Y Variable',names(iris),selected=names(iris)[2]),
#数字输入
numericInput('clusters','Cluster count',3,min=1,max=9)
),
mainPanel(
#输出项 用于server函数的output
#图像输出
plotOutput('plot1')
)
)
#服务器 包含输入和输出的方程
server<-function(input,output){
#data
selectedData<-reactive({iris[,c(input$xcol,input$ycol)]})
#k-means聚类
clusters<-reactive({kmeans(selectedData(),input$clusters)})
#图像
output$plot1<-renderPlot({
par(mar=c(5.1,4.1,0,1))
plot(selectedData(),
col=clusters()$cluster,
pch=20,cex=3)
points(clusters()$center,pch=4,cex=4,lwd=4)
})
}
#shiny
shinyApp(ui=ui,server=server)
# ordinary least squares
# linear model with R function lm()
fit<-lm(glu~npreg+bp+skin+bmi+age,data=Pima.te)
setwd("G:/Columbia/STAT GR5291")
library(MASS)
data("Pima.te")
Pima.te<-Pima.te
setwd("G:/Columbia/STAT GR5291")
library(MASS)
data("Pima.te")
Pima.te<-Pima.te
# ordinary least squares
# linear model with R function lm()
fit<-lm(glu~npreg+bp+skin+bmi+age,data=Pima.te)
summary(fit)
# linear model manually
X<-as.matrix(cbind(1,Pima.te[,c(1,3,4,5,7)]))
Y<-as.matrix(Pima.te[,2])
colnames(Y)<-c("glu")
beta_hat<-((solve(t(X)%*%X))%*%t(X))%*%Y
Y_hat<-X%*%beta_hat
res<-Y-Y_hat
lm(log(glu)~npreg+bp+skin+bmi+age,data=Pima.te)
summary(lm(log(glu)~npreg+bp+skin+bmi+age,data=Pima.te))
boxcox(glu~npreg+bp+skin+bmi+age,data=Pima.te)
summary(boxcox(glu~npreg+bp+skin+bmi+age,data=Pima.te))
a<-boxcox(glu~npreg+bp+skin+bmi+age,data=Pima.te)
a<-boxcox(fit)
boxcox(fit)
boxcox(fit,lambda=seq(-1,0,length=20))
summary(lm(glu^-0.8~npreg+bp+skin+bmi+age,data=Pima.te))
summary(lm(glu^-0.4~npreg+bp+skin+bmi+age,data=Pima.te))
Pima.te$glu
a<-Pima.te$glu^-0.8
a
summary(lm(a~npreg+bp+skin+bmi+age,data=Pima.te))
library(car)
vif(fit)
library(car)
library(car)
library(car)
library(pbkrtest)
library(car)
library(car)
library(fmsb)
VIF(lm(npreg~bp+skin+bmi+age,data=Pima.te))
VIF(lm(bp~npreg+skin+bmi+age,data=Pima.te))
VIF(lm(skin~bp+npreg+bmi+age,data=Pima.te))
VIF(lm(bmi~skin+bp+npreg+age,data=Pima.te))
VIF(lm(age~bmi+skin+bp+npreg,data=Pima.te))
summary(lm(glu~bmi+age,data=Pima.te))
library(lmtest)
bptest(fit)
library(lmtest)
bptest(fit)
setwd("G:/Columbia/STAT GR5291")
library(MASS)
data("Pima.te")
Pima.te<-Pima.te
# ordinary least squares
# linear model with R function lm()
fit<-lm(glu~npreg+bp+skin+bmi+age,data=Pima.te)
summary(fit)
# linear model manually
X<-as.matrix(cbind(1,Pima.te[,c(1,3,4,5,7)]))
Y<-as.matrix(Pima.te[,2])
colnames(Y)<-c("glu")
beta_hat<-((solve(t(X)%*%X))%*%t(X))%*%Y
Y_hat<-X%*%beta_hat
res<-Y-Y_hat
pairs(cbind(Y,X[,-1]))
cor(cbind(Y,X[,-1]))
par(mfrow=c(2,2))
plot(res~X[,2],pch=20,col=3,xlab="npreg",ylab="residual",main="residuals against npreg")
plot(res~X[,3],pch=20,col=3,xlab="bp",ylab="residual",main="residuals against bp")
plot(res~X[,4],pch=20,col=3,xlab="skin",ylab="residual",main="residuals against skin")
plot(res~X[,5],pch=20,col=3,xlab="bmi",ylab="residual",main="residuals against bmi")
plot(res~X[,6],pch=20,col=3,xlab="age",ylab="residual",main="residuals against age")
X1X2<-X[,2]*X[,3]
plot(res~X1X2,pch=20,col=3,xlab="npreg*bp",ylab="residual",main="residuals against npreg*bp")
X1X3<-X[,2]*X[,4]
plot(res~X1X3,pch=20,col=3,xlab="npreg*skin",ylab="residual",main="residuals against npreg*skin")
X1X4<-X[,2]*X[,5]
plot(res~X1X4,pch=20,col=3,xlab="npreg*bmi",ylab="residual",main="residuals against npreg*bmi")
X1X5<-X[,2]*X[,6]
plot(res~X1X5,pch=20,col=3,xlab="npreg*age",ylab="residual",main="residuals against npreg*age")
X2X3<-X[,3]*X[,4]
plot(res~X2X3,pch=20,col=3,xlab="bp*skin",ylab="residual",main="residuals against bp*skin")
X2X4<-X[,3]*X[,5]
plot(res~X2X4,pch=20,col=3,xlab="bp*bmi",ylab="residual",main="residuals against bp*bmi")
X2X5<-X[,3]*X[,6]
plot(res~X2X5,pch=20,col=3,xlab="bp*age",ylab="residual",main="residuals against bp*age")
X3X4<-X[,4]*X[,5]
plot(res~X3X4,pch=20,col=3,xlab="skin*bmi",ylab="residual",main="residuals against skin*bmi")
X3X5<-X[,4]*X[,6]
plot(res~X3X5,pch=20,col=3,xlab="skin*age",ylab="residual",main="residuals against skin*age")
X4X5<-X[,5]*X[,6]
plot(res~X4X5,pch=20,col=3,xlab="bmi*age",ylab="residual",main="residuals against bmi*age")
par(mfrow=c(1,1))
qqnorm(res,main="normal probability of residuals")
qqline(res)
shapiro.test(res)
StdErrRe<-summary(fit)$sigma
ExpValsRe<-sapply(1:nrow(Pima.te),function(k) StdErrRe*qnorm((k-.375)/(nrow(Pima.te)+.25)))
cor(ExpValsRe,sort(fit$residuals))
plot(res~X[,2],pch=20,col=4,xlab="npreg",ylab="residual",main="residuals against npreg")
plot(res~X[,3],pch=20,col=4,xlab="bp",ylab="residual",main="residuals against bp")
plot(res~X[,4],pch=20,col=4,xlab="skin",ylab="residual",main="residuals against skin")
plot(res~X[,5],pch=20,col=4,xlab="bmi",ylab="residual",main="residuals against bmi")
plot(res~X[,6],pch=20,col=4,xlab="age",ylab="residual",main="residuals against age")
library(lmtest)
bptest(fit)
e.pre<-res[1:(length(res)-1)]
e.aft<-res[2:length(res)]
plot(e.aft~e.pre,pch=20,col=2,xlab="e(t-1)",ylab="e(t)",main="scatter plot for e(t-1) vs e(t)")
plot(res~c(1:length(res)),pch=20,col=2,xlab="t",ylab="e(t)",main="scatter plot for t vs e(t)")
DW<-sum((e.aft-e.pre)^2)/sum(res^2)
print(paste0("DW statistic is ", DW))
# Y
n<-nrow(Pima.te)
J<-matrix(1/n,n,n)
I<-diag(n)
H<-X%*%solve(t(X)%*%X)%*%t(X)
ssto<-t(Y)%*%(I-J)%*%Y
ssr<-t(Y)%*%(H-J)%*%Y
sse<-t(res)%*%res
msr<-ssr/5
mse<-sse/(n-6)
# R function
stu<-rstudent(fit)
# manually
t<-vector()
for(i in 1:n){
t[i]<-fit$residuals[i]*sqrt((n-6-1)/(sse*(1-H[i,i])-(fit$residuals[i])^2))
}
bon<-qt(1-0.05/(2*n),n-6-1)
print(which(abs(stu)>bon))
# X
hii<-diag(H)
print(which(as.vector(hii)>(2*6/n)))
# influential
# R function
dff<-dffits(fit)
# manually
dffits<-t*sqrt(hii/(1-hii))
print(which(dff>2*sqrt(6/n)))
# influential
# R function
dff<-dffits(fit)
# manually
dffits<-t*sqrt(hii/(1-hii))
print(which(as.vector(dff)>2*sqrt(6/n)))
# R function
dfb<-dfbetas(fit)
print(paste0("intercept ",which(dfb[,1]>2/sqrt(n))))
print(paste0("npreg ",which(dfb[,2]>2/sqrt(n))))
print(paste0("bp ",which(dfb[,3]>2/sqrt(n))))
print(paste0("skin ",which(dfb[,4]>2/sqrt(n))))
print(paste0("bmi ",which(dfb[,5]>2/sqrt(n))))
print(paste0("age ",which(dfb[,6]>2/sqrt(n))))
# R function
cookdistance<-cooks.distance(fit)
# manually
cook<-(fit$residuals^2/(6*mse))*(hii/(1-hii)^2)
print(which(cookdistance>qf(0.5,6,n-6)))
fit1<-lmsreg(glu~npreg+bp+skin+bmi+age,data=Pima.te)
print(fit1)
library(fmsb)
VIF(lm(npreg~bp+skin+bmi+age,data=Pima.te))
VIF(lm(bp~npreg+skin+bmi+age,data=Pima.te))
VIF(lm(skin~bp+npreg+bmi+age,data=Pima.te))
VIF(lm(bmi~skin+bp+npreg+age,data=Pima.te))
VIF(lm(age~bmi+skin+bp+npreg,data=Pima.te))
summary(lm(glu~npreg+bp+skin,data=Pima.te))
setwd("G:/Columbia/STAT GR5291")
library(MASS)
data("Pima.te")
Pima.te<-Pima.te
# ordinary least squares
# linear model with R function lm()
fit<-lm(glu~npreg+bp+skin+bmi+age,data=Pima.te)
summary(fit)
# linear model manually
X<-as.matrix(cbind(1,Pima.te[,c(1,3,4,5,7)]))
Y<-as.matrix(Pima.te[,2])
colnames(Y)<-c("glu")
beta_hat<-((solve(t(X)%*%X))%*%t(X))%*%Y
Y_hat<-X%*%beta_hat
res<-Y-Y_hat
pairs(cbind(Y,X[,-1]))
cor(cbind(Y,X[,-1]))
par(mfrow=c(2,2))
plot(res~X[,2],pch=20,col=3,xlab="npreg",ylab="residual",main="residuals against npreg")
plot(res~X[,3],pch=20,col=3,xlab="bp",ylab="residual",main="residuals against bp")
plot(res~X[,4],pch=20,col=3,xlab="skin",ylab="residual",main="residuals against skin")
plot(res~X[,5],pch=20,col=3,xlab="bmi",ylab="residual",main="residuals against bmi")
plot(res~X[,6],pch=20,col=3,xlab="age",ylab="residual",main="residuals against age")
X1X2<-X[,2]*X[,3]
plot(res~X1X2,pch=20,col=3,xlab="npreg*bp",ylab="residual",main="residuals against npreg*bp")
X1X3<-X[,2]*X[,4]
plot(res~X1X3,pch=20,col=3,xlab="npreg*skin",ylab="residual",main="residuals against npreg*skin")
X1X4<-X[,2]*X[,5]
plot(res~X1X4,pch=20,col=3,xlab="npreg*bmi",ylab="residual",main="residuals against npreg*bmi")
X1X5<-X[,2]*X[,6]
plot(res~X1X5,pch=20,col=3,xlab="npreg*age",ylab="residual",main="residuals against npreg*age")
X2X3<-X[,3]*X[,4]
plot(res~X2X3,pch=20,col=3,xlab="bp*skin",ylab="residual",main="residuals against bp*skin")
X2X4<-X[,3]*X[,5]
plot(res~X2X4,pch=20,col=3,xlab="bp*bmi",ylab="residual",main="residuals against bp*bmi")
X2X5<-X[,3]*X[,6]
plot(res~X2X5,pch=20,col=3,xlab="bp*age",ylab="residual",main="residuals against bp*age")
X3X4<-X[,4]*X[,5]
plot(res~X3X4,pch=20,col=3,xlab="skin*bmi",ylab="residual",main="residuals against skin*bmi")
X3X5<-X[,4]*X[,6]
plot(res~X3X5,pch=20,col=3,xlab="skin*age",ylab="residual",main="residuals against skin*age")
X4X5<-X[,5]*X[,6]
plot(res~X4X5,pch=20,col=3,xlab="bmi*age",ylab="residual",main="residuals against bmi*age")
par(mfrow=c(1,1))
qqnorm(res,main="normal probability of residuals")
qqline(res)
shapiro.test(res)
StdErrRe<-summary(fit)$sigma
ExpValsRe<-sapply(1:nrow(Pima.te),function(k) StdErrRe*qnorm((k-.375)/(nrow(Pima.te)+.25)))
cor(ExpValsRe,sort(fit$residuals))
plot(res~X[,2],pch=20,col=4,xlab="npreg",ylab="residual",main="residuals against npreg")
plot(res~X[,3],pch=20,col=4,xlab="bp",ylab="residual",main="residuals against bp")
plot(res~X[,4],pch=20,col=4,xlab="skin",ylab="residual",main="residuals against skin")
plot(res~X[,5],pch=20,col=4,xlab="bmi",ylab="residual",main="residuals against bmi")
plot(res~X[,6],pch=20,col=4,xlab="age",ylab="residual",main="residuals against age")
library(lmtest)
bptest(fit)
e.pre<-res[1:(length(res)-1)]
e.aft<-res[2:length(res)]
plot(e.aft~e.pre,pch=20,col=2,xlab="e(t-1)",ylab="e(t)",main="scatter plot for e(t-1) vs e(t)")
plot(res~c(1:length(res)),pch=20,col=2,xlab="t",ylab="e(t)",main="scatter plot for t vs e(t)")
DW<-sum((e.aft-e.pre)^2)/sum(res^2)
print(paste0("DW statistic is ", DW))
# Y
n<-nrow(Pima.te)
J<-matrix(1/n,n,n)
I<-diag(n)
H<-X%*%solve(t(X)%*%X)%*%t(X)
ssto<-t(Y)%*%(I-J)%*%Y
ssr<-t(Y)%*%(H-J)%*%Y
sse<-t(res)%*%res
msr<-ssr/5
mse<-sse/(n-6)
# R function
stu<-rstudent(fit)
# manually
t<-vector()
for(i in 1:n){
t[i]<-fit$residuals[i]*sqrt((n-6-1)/(sse*(1-H[i,i])-(fit$residuals[i])^2))
}
bon<-qt(1-0.05/(2*n),n-6-1)
print(which(abs(stu)>bon))
# X
hii<-diag(H)
print(which(as.vector(hii)>(2*6/n)))
# influential
# R function
dff<-dffits(fit)
# manually
dffits<-t*sqrt(hii/(1-hii))
print(which(as.vector(dff)>2*sqrt(6/n)))
# R function
dfb<-dfbetas(fit)
print(paste0("intercept ",which(dfb[,1]>2/sqrt(n))))
print(paste0("npreg ",which(dfb[,2]>2/sqrt(n))))
print(paste0("bp ",which(dfb[,3]>2/sqrt(n))))
print(paste0("skin ",which(dfb[,4]>2/sqrt(n))))
print(paste0("bmi ",which(dfb[,5]>2/sqrt(n))))
print(paste0("age ",which(dfb[,6]>2/sqrt(n))))
# R function
cookdistance<-cooks.distance(fit)
# manually
cook<-(fit$residuals^2/(6*mse))*(hii/(1-hii)^2)
print(which(cookdistance>qf(0.5,6,n-6)))
library(fmsb)
VIF(lm(npreg~bp+skin+bmi+age,data=Pima.te))
VIF(lm(bp~npreg+skin+bmi+age,data=Pima.te))
VIF(lm(skin~bp+npreg+bmi+age,data=Pima.te))
VIF(lm(bmi~skin+bp+npreg+age,data=Pima.te))
VIF(lm(age~bmi+skin+bp+npreg,data=Pima.te))
fit1<-lmsreg(glu~npreg+bp+skin+bmi+age,data=Pima.te)
print(fit1)
library(dplyr)
library(data.table)
library(dplyr)
library(data.table)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
install.packages("choroplethr")
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.4.0')
install_github("arilamstein/choroplethrCaCensusTract@v1.1.0")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
qmplot(lon, lat, data=mh2009.selgeo,  colour = I(2), size = I(3))
mh2009.use=
mh2009%>%
mutate(sale.month=month(as.Date(SALE.DATE, "%m/%d/%y")))%>%
mutate(sale.price=ifelse(SALE.PRICE==0, NA, SALE.PRICE))%>%
mutate(footage=ifelse(GROSS.SQUARE.FEET==0, NA, GROSS.SQUARE.FEET))%>%
mutate(unit.price=sale.price/footage)%>%
mutate(bldg.type=substr(BUILDING.CLASS.CATEGORY, 1, 2))%>%
filter(bldg.type %in% c("10", "13", "25", "28"))%>%
arrange(bldg.type)
save(mh2009.use, file="../output/mh2009use.RData")
man.nbhd=c("Central Harlem", "Chelsea and Clinton",
"East Harlem", "Gramercy Park and Murray Hill",
"Greenwich Village and Soho", "Lower Manhattan",
"Lower East Side", "Upper East Side", "Upper West Side",
"Inwood and Washington Heights")
zip.nbhd=list(1:length(man.nbhd))
zip.nbhd[[1]]=c(10026, 10027, 10030, 10037, 10039)
zip.nbhd[[2]]=c(10001, 10011, 10018, 10019, 10020)
zip.nbhd[[3]]=c(10036, 10029, 10035)
zip.nbhd[[4]]=c(10010, 10016, 10017, 10022)
zip.nbhd[[5]]=c(10012, 10013, 10014)
zip.nbhd[[6]]=c(10004, 10005, 10006, 10007, 10038, 10280)
zip.nbhd[[7]]=c(10002, 10003, 10009)
zip.nbhd[[8]]=c(10021, 10028, 10044, 10065, 10075, 10128)
zip.nbhd[[9]]=c(10023, 10024, 10025)
zip.nbhd[[10]]=c(10031, 10032, 10033, 10034, 10040)
qmplot(lon, lat, data=mh2009.selgeo,  colour = I(2), size = I(3))
